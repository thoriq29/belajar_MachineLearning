# -*- coding: utf-8 -*-
"""Submission2_BPML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KLTZmcM8DLhRRebVXLBDQM2NwmRGlx7_
"""

!wget --no-check-certificate \
  https://storage.googleapis.com/writehere-13.appspot.com/energydata_complete.csv \
  -O /content/energy_data.csv

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

tf.keras.backend.floatx()

data_train = pd.read_csv('energy_data.csv')
data_train.drop(data_train.index[11000:19730], inplace=True)
data_train

"""Attribute Information:

date time year-month-day hour:minute:second
Appliances, energy use in Wh
lights, energy use of light fixtures in the house in Wh.
---
T1, Temperature in kitchen area, in Celsius
---
RH_1, Humidity in kitchen area, in %
---
T2, Temperature in living room area, in Celsius
---
RH_2, Humidity in living room area, in %
---
T3, Temperature in laundry room area
---
RH_3, Humidity in laundry room area, in %
---
T4, Temperature in office room, in Celsius
---
RH_4, Humidity in office room, in %
---
T5, Temperature in bathroom, in Celsius
---
RH_5, Humidity in bathroom, in %
---
T6, Temperature outside the building (north side), in Celsius
---
RH_6, Humidity outside the building (north side), in %
---
T7, Temperature in ironing room , in Celsius
---
RH_7, Humidity in ironing room, in %
---
T8, Temperature in teenager room 2, in Celsius
---
RH_8, Humidity in teenager room 2, in %
---
T9, Temperature in parents room, in Celsius
---
RH_9, Humidity in parents room, in %
---
To, Temperature outside (from Chievres weather station), in Celsius
---
Pressure (from Chievres weather station), in mm Hg
---
RH_out, Humidity outside (from Chievres weather station), in %
---
Wind speed (from Chievres weather station), in m/s
---
Visibility (from Chievres weather station), in km
---
Tdewpoint (from Chievres weather station), Â°C
---
rv1, Random variable 1, nondimensional
---
rv2, Random variable 2, nondimensional
---
"""

data_train.isnull().sum()

date = data_train['date'].values
# use T1, Temperature in kitchen area, in Celsius
values  = data_train['T1'].values

from sklearn.model_selection import train_test_split
values_train, values_test, date_train, date_test = train_test_split(values, date, test_size=0.2)

print('Observations: %d' % (len(values)))
print('Training Observations: %d' % (len(values_train)))
print('Testing Observations: %d' % (len(values_test)))

plt.figure(figsize=(15,5))
plt.plot(date, values)
plt.title('Kitchen Temperature AVG',
          fontsize=20);

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(values_train, window_size=60, batch_size=200, shuffle_buffer=1000)
test_set = windowed_dataset(values_test, window_size=60, batch_size=200, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Bidirectional(LSTM(60, return_sequences=True)),
  tf.keras.layers.Bidirectional(LSTM(60)),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dropout(0.7),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

class customCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< 8):
      print("\nMAE dari model < 8% skala data")
      self.model.stop_training = True
callbacks = customCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-05, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set, epochs=500, 
                    validation_data=(test_set), callbacks=[callbacks])

plt.plot(history.history['mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['mae'], loc='upper left')
plt.show()