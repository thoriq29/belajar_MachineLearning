# -*- coding: utf-8 -*-
"""Final Submission BPML_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K9HOrlP3S_dKLej0zmOBwVfCwS0rdGrF
"""

!wget 'https://storage.googleapis.com/writehere-13.appspot.com/mask_dataset.zip' -O /content/mask_dataset.zip

import zipfile,os
local_zip = 'mask_dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/dataset')
zip_ref.close()

!pip install split-folders
!pip install split-folders tqdm

import splitfolders
splitfolders.ratio('/content/dataset/', output="/content/project_data", ratio=(.8, .2))

base_dir = '/content/project_data/'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

def read_list(directory):
  list_tag = []
  list_file = []
  for label in os.listdir(directory):
    for item in os.listdir(os.path.join(directory, label)):
      list_tag.append(label)
      list_file.append(os.path.join(directory, label, item))
  return pd.DataFrame({'tags': list_tag, 'filepath':list_file})

os.listdir(train_dir)

import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization, GlobalAveragePooling2D,Lambda,ZeroPadding2D
from keras.models import Sequential
from keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop

train_df = read_list(train_dir)
validation_df = read_list(validation_dir)

pd.set_option('display.max_colwidth', -1)
validation_df

data_train_img_gen = ImageDataGenerator(
    rotation_range=20,
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
  )

data_val_img_gen = ImageDataGenerator(
    rotation_range=20,
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
  )

train_generator = data_train_img_gen.flow_from_dataframe(
    train_df,
    class_mode='categorical',
    x_col='filepath',
    y_col='tags',
    target_size=(150,150),
    batch_size=4
)

val_generator = data_val_img_gen.flow_from_dataframe(
    validation_df,
    class_mode='categorical',
    x_col='filepath',
    y_col='tags',
    target_size=(150,150),
    batch_size=4
)
print(train_generator.class_indices)

class modelCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.97 and logs.get('val_accuracy') > 0.97):
      print("\nReached 97.8% accuracy so cancelling training!")
      self.model.stop_training = True

callbacks = modelCallback()
model = Sequential()

model.add(Conv2D(32, (5,5), activation='relu', strides=(1,1), padding='valid', input_shape=(150, 150, 3)))
model.add(MaxPooling2D(2, 2))
model.add(MaxPooling2D(2,2))

model.add(Conv2D(64, (5,5), activation='relu', strides=(1,1), padding='valid'))
model.add(MaxPooling2D(2,2))

model.add(Conv2D(128, (5,5), activation='relu', strides=(1,1), padding='valid'))
model.add(MaxPooling2D(2,2))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(2, activation='softmax'))

model.compile(
    loss='categorical_crossentropy',
    optimizer=RMSprop(learning_rate=0.001, rho=0.9),
    metrics=['accuracy']
)

history = model.fit(
    train_generator,
    steps_per_epoch=300,
    epochs=20,
    validation_data=val_generator,
    validation_steps=10,
    verbose=1,
    callbacks=[callbacks]
)

loss, acc = model.evaluate(val_generator)
print("validasi akurasi: {:5.2f}".format(100 * acc))
print("validasi error: {:5.2f}".format(100 * loss))

t_loss, t_acc = model.evaluate(train_generator)
print("trainig akurasi: {:5.2f}".format(100 * t_acc))
print("training error: {:5.2f}".format(100 * t_loss))


acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend(loc=0)
plt.figure()

plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)